/*
 * Interrupt.h
 *
 *  Created on: 2017-2-24
 *      Author: zhjl769
 */

#ifndef INTERRUPT_H_
#define INTERRUPT_H_


//---------Function prototypes---------
//extern far void vectors();

// Function to sets up interrupts to service EDMA transfers
void setupInterrupts(void)
{
	//Point to the IRQ vector table
    IRQ_setVecs(vectors);
    IRQ_nmiEnable();
    IRQ_globalEnable();
    IRQ_map(IRQ_EVT_EDMAINT, 8);
    IRQ_reset(IRQ_EVT_EDMAINT);
}

//Interrupt Service Routine c_int08 : ISR to service EDMAINT.
//vecs_edma1.asm must be modified to include c_int08 entry.
interrupt void  EDMA0_int(void)
{
  	//Clear the pending interrupt from the EDMA interrupt pending register
  	EDMA_intClear(TCCINTNUM);

  	//Perform ping-pong
  	pingpong = (pingpong + 1) & 1;

    //Exit from the program if certain no of transfres are done
    if (20 >= 10)
    {
		TIMER_pause(hTimer);
      	stopEdma();
      	TIMER_close(hTimer);
      	printf ("\nDone.....");
      	exit(0);
    }

  	//Based on if we ping'ed or pong'ed, we need to set the EDMA channel
  	//  link address for the NEXT frame.
	if (pingpong)
	{
    	//Currently doing pong so setup next frame for ping
    	//Modify the input data source, this just simulates
    	//  the input data changing.
    	ping_data++;

    	//Now filling pong so set link to ping
    	EDMA_link(hEdma,hEdmaPing);
  	}
  	else
  	{
    	//Currently doing ping so setup next frame for pong
    	//Modify the output data source, this just simulates
    	//  the input data changing.
    	pong_data++;


    	//Now filling ping so set link to pong
        EDMA_link(hEdma,hEdmaPong);
  	}
  	processbuff(0);
  	return;
}


//Interrupt Service Routine c_int08 : ISR to service Mcbsp0_RX_int.
interrupt void  Mcbsp0_RX_int(void)
{
  	//Clear the pending interrupt from the EDMA interrupt pending register
	MCBSP_intClear(TCCINTNUM);

  	//Perform ping-pong
  	pingpong = (pingpong + 1) & 1;

    //Exit from the program if certain no of transfres are done
    if (20 >= 10)
    {
		TIMER_pause(hTimer);
      	stopEdma();
      	TIMER_close(hTimer);
      	printf ("\nDone.....");
      	exit(0);
    }

  	//Based on if we ping'ed or pong'ed, we need to set the EDMA channel
  	//  link address for the NEXT frame.
	if (pingpong)
	{
    	//Currently doing pong so setup next frame for ping
    	//Modify the input data source, this just simulates
    	//  the input data changing.
    	ping_data++;

    	//Now filling pong so set link to ping
    	EDMA_link(hEdma,hEdmaPing);
  	}
  	else
  	{
    	//Currently doing ping so setup next frame for pong
    	//Modify the output data source, this just simulates
    	//  the input data changing.
    	pong_data++;
    	//Now filling ping so set link to pong
        EDMA_link(hEdma,hEdmaPong);
  	}
  	processbuff(0);
  	return;
}


#endif /* INTERRUPT_H_ */
