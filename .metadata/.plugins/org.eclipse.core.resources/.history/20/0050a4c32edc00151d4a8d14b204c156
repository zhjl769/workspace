/*
 * LCD12864.c
 *
 *  Created on: 2016-2-25
 *      Author: zhjl769
 */
#include <msp430f1611.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include "LCD12864.h"

#define CPU_F ((double)8000000)
#define delay_us(x) _delay_cycles((long)(CPU_F*(double)x/1000000.0))
#define delay_ms(x) _delay_cycles((long)(CPU_F*(double)x/1000.0))//软件延时，程序中直接调用delay_ms (x),x为需要延时的时间


#define CLR_CS P3OUT &= ~BIT0   //CS = 0,液晶片选=0,P3.0
#define SEL_CS P3OUT |= BIT0    //CS = 1,液晶片选=1,P3.0
#define CLR_SID P3OUT &= ~BIT1  //SID = 0,液晶数据口=0,P3.1
#define SEL_SID P3OUT |= BIT1   //SID = 1,液晶数据口=1,P3.1
#define CLR_CLK P3OUT &= ~BIT2  //CLR_CLK,液晶时钟=0,P3.2
#define SEL_CLK P3OUT |= BIT2   //SEL_CLK,液晶时钟=1,P3.2

#define SID_IN P3DIR &= ~BIT1   //SID_IN,液晶数据口输入方向,P3.1
#define SID_OUT P3DIR |= BIT1   //SEL_CLK,液晶数据口输出方向,P3.1
#define DAT_IN  P3IN  |= BIT1   //SEL_CLK,液晶数据口输入数据,P3.1
#define DAT_OUT P3OUT &= ~BIT1  //SEL_CLK,液晶数据口输出数据,P3.1



void LCD12864_write_byte(uchar byte)		//写字节函数
{
	uchar i;
	SID_IN; //SID切换到输入方向
	for(i = 0;i < 8;i++)
	{
		CLR_CLK; //lcd_clk拉低
		_nop_();
		if (byte & 0x80 == 1)

		LCD_SID = (bit)(byte & 0x80);  //发送最高位数据
		byte <<= 1;//byte左移一位
		SEL_CLK;//lcd_clk拉高
		_nop_();
	}
}

uchar LCD12864_read_byte()		//读字节函数
{
	uchar i,temp1,temp2;
	temp1 = 0;
	temp2 = 0;
	for(i = 0;i < 8;i++)		//读高四位
	{
		temp1 = temp1 << 1;
		CLR_CLK;
		SEL_CLK;
		CLR_CLK;
		if(sid)
			temp1++;
	}
	for(i = 0;i < 8;i++)		//读低四位
	{
		temp2 = temp2 << 1;
		CLR_CLK;
		SEL_CLK;
		CLR_CLK;
		if(sid)
			temp2++;
	}
	return ((0xf0 & temp1) + (0x0f & temp2));
}

void LCD12864_busy()		//检测忙函数
{
	do LCD12864_write_byte(0xfc);	//11111,A(1),B(0),0
	while(0x80 & LCD12864_read_byte());
}

void LCD12864_write(bit dat_com,uchar byte) //写入函数(先写com活dat，再写所需指令或数据)
{
	uchar temp;
	if(dat_com == 0) //为零,写入指令
		temp = 0xf8; //11111,A(0),B(0),0
	else //否则,写入数据
		temp = 0xfa;  //11111,A(0),B(1),0
	SEL_CS;
	LCD12864_busy();
	LCD12864_write_byte(temp);
	LCD12864_write_byte(byte & 0xf0); //写入高四位
	LCD12864_write_byte(byte << 4); //写入低四位
	CLR_CS;
}

void LCD12864_init()		//初始化函数
{
	LCD12864_write(com,0x30); //基本指令功能.
	LCD12864_write(com,0x0c); //显示打开,关光标,反白关.
	LCD12864_write(com,0x01); //清屏指令.
	LCD12864_write(com,0x06); //AC 自动加一
}

void LCD12864_write_bmp(uchar *puts)		//绘图函数(调用时括号里面写图形数组名称)
{
	uint x=0;
	uchar i,j;
	LCD12864_write(com,0x34); //扩展指令
	LCD12864_write(com,0x36); //打开绘图
	for(i=0;i<32;i++)
	{
		LCD12864_write(com,0x80|i);//列 32 行,双屏结构中上半屏
		LCD12864_write(com,0x80); //X 地址坐标,自动加 1.
		for(j=0;j<16;j++) //16*8=256
			LCD12864_write(dat,puts[x++]);
	}
	for(i=0;i<32;i++)
	{
		LCD12864_write(com,0x80|i);
		LCD12864_write(com,0x88); //下半屏
		for(j=0;j<16;j++)
			LCD12864_write(dat,puts[x++]);
	}
}

void LCD12864_lcd_clear()	//清屏函数
{
	LCD12864_write(com,0x30);
	LCD12864_write(com,0x01);
}

void LCD12864_bmp_clear()	//清图形函数
{
	uchar i,j;
	LCD12864_write(com,0x34);	//8Bit 扩充指令集,即使是 36H 也要写两次
	LCD12864_write(com,0x36);	 //绘图 ON,基本指令集里面 36H 不能开绘图
	for(i=0;i<32;i++)	//12864 实际为 256x32
	{
		LCD12864_write(com,0x80|i);	//行位置
		LCD12864_write(com,0x80);		//列位置
		for(j=0;j<32;j++)  //256/8=32 byte //12864 实际为 256x32
		LCD12864_write(dat,0);
	}
}

void LCD12864_txt_clear()		//清文本函数
{
	uchar i;
	LCD12864_write(com,0x30);		//8BitMCU,基本指令集合
	LCD12864_write(com,0x80);		//AC 归起始位
	for(i=0;i<64;i++)
		LCD12864_write(dat,0x20);
}

void LCD12864_write_zi(uchar x,uchar y,uchar *buff)		//括号中依次填行数，列数，字符串数组名称
{
	uchar addr,i=0;
	if(x==0)
		addr=0x80;
	else if(x==1)
		addr=0x90;
	else if(x==2)
		addr=0x88;
	else if(x==3)
		addr=0x98;
	addr=addr+y;
	LCD12864_write(com,0x30);
	LCD12864_write(com,addr);
	while(buff[i]!='\0')
	{
		LCD12864_write(dat,buff[i]);
		i++;
	}
}

void LCD12864_delay(uint x)	//延时函数
{
	uint i,j;
	for(i=0;i<x;i++)
		for(j=0;j<123;j++);
}



